loose text artifact
<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="{GUID}" name="<exe-name>" runUser="Catch2VstestReporter" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="{iso8601-timestamp}" queuing="{iso8601-timestamp}" start="{iso8601-timestamp}" finish="{iso8601-timestamp}"/>
  <Results>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="# A test name that starts with a #" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1005: Comparing pointer to int and long (NULL can be either on various systems)" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1027: Bitfields can be captured" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1147" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1175 - Hidden Test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1238" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1245" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1319: Sections can have description (even if it is not saved" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1403" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1455 - INFO and WARN can start with a linebreak" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1514: stderr/stdout is not captured in tests aborted by an exception" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: 1514
This would not be caught previously

        </StdOut>
        <StdErr>
Nor would this

        </StdErr>
        <ErrorInfo>
          <Message>
Failed: 1514

          </Message>
          <StackTrace>
Tricky.tests.cppline 402

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: 1514
This would not be caught previously

        </StdOut>
        <StdErr>
Nor would this

        </StdErr>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1548" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1905 -- test spec parser properly clears internal state between compound tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1912 -- test spec parser handles escaping" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1912 -- test spec parser handles escaping / Various parentheses" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1912 -- test spec parser handles escaping / backslash in test name" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATE inside a for loop should not keep recreating the generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATE inside a for loop should not keep recreating the generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATE inside a for loop should not keep recreating the generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATEs can share a line" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATEs can share a line" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATEs can share a line" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATEs can share a line" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1913 - GENERATEs can share a line" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - GENERATE after a section" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - GENERATE after a section / A" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - GENERATE after a section / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - GENERATE after a section / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - GENERATE after a section / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - Section followed by flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - Section followed by flat generate / A" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - Section followed by flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - flat generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / A" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / A" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates / B" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - mixed sections and generates" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1938 - nested generate" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#748 - captures with unexpected exceptions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#748 - captures with unexpected exceptions / outside assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Exception: expected exception

              </Message>
              <StackTrace>
Exception.tests.cppline 190

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#748 - captures with unexpected exceptions / inside REQUIRE_NOTHROW" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Exception: expected exception

              </Message>
              <StackTrace>
Exception.tests.cppline 194

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#748 - captures with unexpected exceptions / inside REQUIRE_THROWS" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#809" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#833" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#835 -- errno should not be touched by Catch" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( f() == 0 ) as CHECK ( 1 == 0 )

          </Message>
          <StackTrace>
Misc.tests.cppline 469

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#872" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported / Looped section 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported / Looped section 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported / Looped section 2" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported / Looped section 3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="#961 -- Dynamically created sections should all be reported / Looped section 4" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="'Not' checks that should fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( false != false )CHECK( true != true )CHECK( !true ) as CHECK ( false )
CHECK_FALSE( true ) as CHECK_FALSE ( !true )
CHECK( !trueValue ) as CHECK ( false )
CHECK_FALSE( trueValue ) as CHECK_FALSE ( !true )
CHECK( !(1 == 1) ) as CHECK ( false )
CHECK_FALSE( 1 == 1 )
          </Message>
          <StackTrace>
Condition.tests.cppline 322
Condition.tests.cppline 323
Condition.tests.cppline 324
Condition.tests.cppline 325
Condition.tests.cppline 327
Condition.tests.cppline 328
Condition.tests.cppline 330
Condition.tests.cppline 331

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="'Not' checks that should succeed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated / compare to true" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated / compare to false" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated / negation" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated / double negation" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="(unimplemented) static bools can be evaluated / direct" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="3x3x3 ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A METHOD_AS_TEST_CASE based test run that fails" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( s == "world" ) as REQUIRE ( "hello" == "world" )

          </Message>
          <StackTrace>
Class.tests.cppline 30

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A METHOD_AS_TEST_CASE based test run that succeeds" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 ) as REQUIRE ( 0 == 1 )

          </Message>
          <StackTrace>
Class.tests.cppline 124

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 ) as REQUIRE ( 0 == 1 )

          </Message>
          <StackTrace>
Class.tests.cppline 124

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 ) as REQUIRE ( 0 == 1 )

          </Message>
          <StackTrace>
Class.tests.cppline 124

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 ) as REQUIRE ( 0 == 1 )

          </Message>
          <StackTrace>
Class.tests.cppline 124

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 ) as REQUIRE ( 6 &lt; 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 129

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 ) as REQUIRE ( 2 &lt; 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 129

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 ) as REQUIRE ( 6 &lt; 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 129

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 ) as REQUIRE ( 2 &lt; 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 129

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;float,6>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;int,2>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 ) as REQUIRE ( 1.0 == 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 115

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 ) as REQUIRE ( 1.0f == 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 115

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 ) as REQUIRE ( 1 == 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 115

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Nttp_Fixture&lt;V>::value == 0 ) as REQUIRE ( 1 == 0 )

          </Message>
          <StackTrace>
Class.tests.cppline 119

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Nttp_Fixture&lt;V>::value == 0 ) as REQUIRE ( 3 == 0 )

          </Message>
          <StackTrace>
Class.tests.cppline 119

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( Nttp_Fixture&lt;V>::value == 0 ) as REQUIRE ( 6 == 0 )

          </Message>
          <StackTrace>
Class.tests.cppline 119

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEST_CASE_METHOD based test run that fails" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( m_a == 2 ) as REQUIRE ( 1 == 2 )

          </Message>
          <StackTrace>
Class.tests.cppline 110

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A TEST_CASE_METHOD based test run that succeeds" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case - Foo&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case - Foo&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case - std::vector&lt;float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case - std::vector&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case with array signature - Bar&lt;float, 42>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case with array signature - Bar&lt;int, 9>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case with array signature - std::array&lt;float, 42>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A Template product test case with array signature - std::array&lt;int, 9>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A comparison that uses literals instead of the normal constructor" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A couple of nested sections followed by a failure" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: to infinity and beyond

        </StdOut>
        <ErrorInfo>
          <Message>
Failed: to infinity and beyond

          </Message>
          <StackTrace>
Misc.tests.cppline 406

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: to infinity and beyond

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="A failing expression with a non streamable type is still captured" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( &amp;o1 == &amp;o2 ) as CHECK ( 0x<hex digits> == 0x<hex digits> )
CHECK( o1 == o2 ) as CHECK ( {?} == {?} )

          </Message>
          <StackTrace>
Tricky.tests.cppline 72
Tricky.tests.cppline 73

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Absolute margin" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="An empty test with no assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="An expression with side-effects should only be evaluated once" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="An unchecked exception reports the line of the last assertion" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: unexpected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: unexpected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 89

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: unexpected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Anonymous test case 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approx setters validate their arguments" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approx with exactly-representable margin" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approximate PI" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approximate comparisons with different epsilons" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approximate comparisons with floats" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approximate comparisons with ints" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Approximate comparisons with mixed numeric types" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Arbitrary predicate matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Arbitrary predicate matcher / Function pointer" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Arbitrary predicate matcher / Lambdas + different type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Assertion macros support bit operators and bool conversions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Assertions then sections" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Assertions then sections / A section / Another section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Assertions then sections / A section / Another other section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Different argument ranges same element type default comparison" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Different argument ranges same element type custom comparison" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Different element type custom comparisons" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Can handle type that requires ADL-found free function begin and end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Initialization with move only types" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Contains range matcher / Matching using matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Empty range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Empty range matcher / Simple std-provided containers" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Empty range matcher / Type with empty" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Basic use of the Empty range matcher / Type requires ADL found empty free function" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="CAPTURE can deal with complex expressions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="CAPTURE can deal with complex expressions involving commas" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="CAPTURE parses string and character constants" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Capture and info messages" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Capture and info messages / Capture should stringify like assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Capture and info messages / Info should NOT stringify the way assertions do" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Character pretty printing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Character pretty printing / Specifically escaped" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Character pretty printing / General chars" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Character pretty printing / Low ASCII" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Clara::Arg supports single-arg parse the way Opt does" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining MatchAllOfGeneric does not nest" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining MatchAnyOfGeneric does not nest" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining MatchNotOfGeneric does not nest" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining concrete matchers does not use templated matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining only templated matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining templated and concrete matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Combining templated matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Commas in various macros are allowed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparing function pointers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparison ops" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparison with explicitly convertible types" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparisons between ints where one side is computed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Comparisons with int literals don't warn when mixing signed/ unsigned" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed generic matchers shortcircuit" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed generic matchers shortcircuit / MatchAllOf" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed generic matchers shortcircuit / MatchAnyOf" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed matchers shortcircuit" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed matchers shortcircuit / MatchAllOf" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Composed matchers shortcircuit / MatchAnyOf" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Contains string matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), Contains("not there", Catch::CaseSensitive::No) ) as CHECK_THAT ( "this string contains 'abc' as a substring" contains: "not there" (case insensitive) )
CHECK_THAT( testStringForMatching(), Contains("STRING") ) as CHECK_THAT ( "this string contains 'abc' as a substring" contains: "STRING" )

          </Message>
          <StackTrace>
Matchers.tests.cppline 128
Matchers.tests.cppline 129

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / from var and iterators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / From a temporary container" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Copy and then generate a range / Final validation" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Custom exceptions can be translated when testing for nothrow" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: custom exception - not std

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: custom exception - not std

          </Message>
          <StackTrace>
Exception.tests.cppline 146

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: custom exception - not std

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Custom exceptions can be translated when testing for throwing as something else" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: custom exception - not std

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: custom exception - not std

          </Message>
          <StackTrace>
Exception.tests.cppline 150

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: custom exception - not std

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Custom std-exceptions can be custom translated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: custom std exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: custom std exception

          </Message>
          <StackTrace>
Exception.tests.cppline 141

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: custom std exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Default scale is invisible to comparison" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Directly creating an EnumInfo" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="EndsWith string matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), EndsWith("Substring") ) as CHECK_THAT ( "this string contains 'abc' as a substring" ends with: "Substring" )
CHECK_THAT( testStringForMatching(), EndsWith("this", Catch::CaseSensitive::No) ) as CHECK_THAT ( "this string contains 'abc' as a substring" ends with: "this" (case insensitive) )

          </Message>
          <StackTrace>
Matchers.tests.cppline 138
Matchers.tests.cppline 139

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Enums can quickly have stringification enabled using REGISTER_ENUM" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Epsilon only applies to Approx's value" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Equality checks that should fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( data.int_seven == 6 ) as CHECK ( 7 == 6 )
CHECK( data.int_seven == 8 ) as CHECK ( 7 == 8 )
CHECK( data.int_seven == 0 ) as CHECK ( 7 == 0 )
CHECK( data.float_nine_point_one == Approx( 9.11f ) ) as CHECK ( 9.1f == Approx( 9.1099996567 ) )
CHECK( data.float_nine_point_one == Approx( 9.0f ) ) as CHECK ( 9.1f == Approx( 9.0 ) )
CHECK( data.float_nine_point_one == Approx( 1 ) ) as CHECK ( 9.1f == Approx( 1.0 ) )
CHECK( data.float_nine_point_one == Approx( 0 ) ) as CHECK ( 9.1f == Approx( 0.0 ) )
CHECK( data.double_pi == Approx( 3.1415 ) ) as CHECK ( 3.1415926535 == Approx( 3.1415 ) )
CHECK( data.str_hello == "goodbye" ) as CHECK ( "hello" == "goodbye" )
CHECK( data.str_hello == "hell" ) as CHECK ( "hello" == "hell" )
CHECK( data.str_hello == "hello1" ) as CHECK ( "hello" == "hello1" )
CHECK( data.str_hello.size() == 6 ) as CHECK ( 5 == 6 )
CHECK( x == Approx( 1.301 ) ) as CHECK ( 1.3 == Approx( 1.301 ) )

          </Message>
          <StackTrace>
Condition.tests.cppline 75
Condition.tests.cppline 76
Condition.tests.cppline 77
Condition.tests.cppline 78
Condition.tests.cppline 79
Condition.tests.cppline 80
Condition.tests.cppline 81
Condition.tests.cppline 82
Condition.tests.cppline 83
Condition.tests.cppline 84
Condition.tests.cppline 85
Condition.tests.cppline 86
Condition.tests.cppline 89

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Equality checks that should succeed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Equals" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Equals string matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), Equals("this string contains 'ABC' as a substring") ) as CHECK_THAT ( "this string contains 'abc' as a substring" equals: "this string contains 'ABC' as a substring" )
CHECK_THAT( testStringForMatching(), Equals("something else", Catch::CaseSensitive::No) ) as CHECK_THAT ( "this string contains 'abc' as a substring" equals: "something else" (case insensitive) )

          </Message>
          <StackTrace>
Matchers.tests.cppline 143
Matchers.tests.cppline 144

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that fail / No exception" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Failed:
Failed:

              </Message>
              <StackTrace>
Matchers.tests.cppline 407
Matchers.tests.cppline 408

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that fail / Type mismatch" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Exception: Unknown exception
Exception: Unknown exception

              </Message>
              <StackTrace>
Matchers.tests.cppline 411
Matchers.tests.cppline 412

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that fail / Contents are wrong" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THROWS_MATCHES( throwsSpecialException(3), SpecialException, ExceptionMatcher{1} ) as CHECK_THROWS_MATCHES ( SpecialException::what special exception has value of 1 )
REQUIRE_THROWS_MATCHES( throwsSpecialException(4), SpecialException, ExceptionMatcher{1} ) as REQUIRE_THROWS_MATCHES ( SpecialException::what special exception has value of 1 )

              </Message>
              <StackTrace>
Matchers.tests.cppline 415
Matchers.tests.cppline 416

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception matchers that succeed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception messages can be tested for" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception messages can be tested for / exact match" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception messages can be tested for / different case" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exception messages can be tested for / wildcarded" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Exceptions matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Expected exceptions that don't throw or unexpected exceptions fail the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: expected exception
INFO: expected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: expected exception
Failed:
Exception: expected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 79
Exception.tests.cppline 80
Exception.tests.cppline 81

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: expected exception
INFO: expected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="FAIL aborts the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: This is a failure

        </StdOut>
        <ErrorInfo>
          <Message>
Failed: This is a failure

          </Message>
          <StackTrace>
Message.tests.cppline 51

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: This is a failure

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="FAIL does not require an argument" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
Failed:

          </Message>
          <StackTrace>
Message.tests.cppline 61

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="FAIL_CHECK does not abort the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: This is a failure

        </StdOut>
        <ErrorInfo>
          <Message>
Failed: This is a failure

          </Message>
          <StackTrace>
Message.tests.cppline 56

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: This is a failure

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Factorials are computed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double / Relative / Some subnormal values" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double / Margin" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double / ULPs" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double / Composed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: double / Constructor validation" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float / Relative / Some subnormal values" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float / Margin" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float / ULPs" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float / Composed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Floating point matchers: float / Constructor validation" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Filtering by predicate / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Filtering by predicate / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Filtering by predicate / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Filtering by predicate / Throws if there are no matching values" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Shortening a range" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Shortening a range" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Shortening a range" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Same type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Same type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Same type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different deduced type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different deduced type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Transforming elements / Different deduced type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Repeating a generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Number of elements in source is divisible by chunk size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Number of elements in source is divisible by chunk size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Number of elements in source is divisible by chunk size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Number of elements in source is not divisible by chunk size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Number of elements in source is not divisible by chunk size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Chunk size of zero" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Chunk size of zero" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Chunk size of zero" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- adapters / Chunking a generator into sized pieces / Throws on too small generators" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators -- simple / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Single value" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Preset values" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Generator combinator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Explicitly typed generator sequence" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Filter generator" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Take generator / Take less" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Take generator / Take more" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Map with explicit return type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Map with deduced return type" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Repeat / Singular repeat" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Repeat / Actual repeat" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive auto step / Integer" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Negative auto step / Integer" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Integer / Exact" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Integer / Slightly over end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Integer / Slightly under end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Floating Point / Exact" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Floating Point / Slightly over end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Positive manual step / Floating Point / Slightly under end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Negative manual step / Integer / Exact" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Negative manual step / Integer / Slightly over end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Generators internals / Range / Negative manual step / Integer / Slightly under end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Greater-than inequalities with different epsilons" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="INFO and WARN do not abort tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="INFO gets logged on failure" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: this message should be logged
INFO: so should this

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( a == 1 ) as REQUIRE ( 2 == 1 )

          </Message>
          <StackTrace>
Message.tests.cppline 29

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: this message should be logged
INFO: so should this

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="INFO gets logged on failure, even if captured before successful assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: this message may be logged later
INFO: this message should be logged
INFO: this message may be logged later
INFO: this message should be logged
INFO: and this, but later

        </StdOut>
        <ErrorInfo>
          <Message>
CHECK( a == 1 ) as CHECK ( 2 == 1 )
CHECK( a == 0 ) as CHECK ( 2 == 0 )

          </Message>
          <StackTrace>
Message.tests.cppline 39
Message.tests.cppline 43

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: this message may be logged later
INFO: this message should be logged
INFO: this message may be logged later
INFO: this message should be logged
INFO: and this, but later

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="INFO is reset for each loop" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: current counter 10
INFO: i := 10

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( i &lt; 10 ) as REQUIRE ( 10 &lt; 10 )

          </Message>
          <StackTrace>
Message.tests.cppline 110

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: current counter 10
INFO: i := 10

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Inequality checks that should fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( data.int_seven != 7 ) as CHECK ( 7 != 7 )
CHECK( data.float_nine_point_one != Approx( 9.1f ) ) as CHECK ( 9.1f != Approx( 9.1000003815 ) )
CHECK( data.double_pi != Approx( 3.1415926535 ) ) as CHECK ( 3.1415926535 != Approx( 3.1415926535 ) )
CHECK( data.str_hello != "hello" ) as CHECK ( "hello" != "hello" )
CHECK( data.str_hello.size() != 5 ) as CHECK ( 5 != 5 )

          </Message>
          <StackTrace>
Condition.tests.cppline 113
Condition.tests.cppline 114
Condition.tests.cppline 115
Condition.tests.cppline 116
Condition.tests.cppline 117

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Inequality checks that should succeed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Lambdas in assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Less-than inequalities with different epsilons" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="ManuallyRegistered" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be (AllOf) composed with the &amp;&amp; operator" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be (AnyOf) composed with the || operator" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be composed with both &amp;&amp; and ||" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be composed with both &amp;&amp; and || - failing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), (Contains("string") || Contains("different")) &amp;&amp; Contains("random") ) as CHECK_THAT ( "this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "random" ) )

          </Message>
          <StackTrace>
Matchers.tests.cppline 208

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be negated (Not) with the ! operator" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Matchers can be negated (Not) with the ! operator - failing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), !Contains("substring") ) as CHECK_THAT ( "this string contains 'abc' as a substring" not contains: "substring" )

          </Message>
          <StackTrace>
Matchers.tests.cppline 217

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Mismatching exception messages failing the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE_THROWS_WITH( thisThrows(), "should fail" ) as REQUIRE_THROWS_WITH ( "expected exception" equals: "should fail" )

          </Message>
          <StackTrace>
Exception.tests.cppline 182

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nested generators and captured variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Nice descriptive name" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Non-std exceptions can be translated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: custom exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: custom exception

          </Message>
          <StackTrace>
Exception.tests.cppline 137

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: custom exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Objects that evaluated in boolean contexts can be checked" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Optionally static assertions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Ordering comparison checks that should fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( data.int_seven > 7 ) as CHECK ( 7 > 7 )
CHECK( data.int_seven &lt; 7 ) as CHECK ( 7 &lt; 7 )
CHECK( data.int_seven > 8 ) as CHECK ( 7 > 8 )
CHECK( data.int_seven &lt; 6 ) as CHECK ( 7 &lt; 6 )
CHECK( data.int_seven &lt; 0 ) as CHECK ( 7 &lt; 0 )
CHECK( data.int_seven &lt; -1 ) as CHECK ( 7 &lt; -1 )
CHECK( data.int_seven >= 8 ) as CHECK ( 7 >= 8 )
CHECK( data.int_seven &lt;= 6 ) as CHECK ( 7 &lt;= 6 )
CHECK( data.float_nine_point_one &lt; 9 ) as CHECK ( 9.1f &lt; 9 )
CHECK( data.float_nine_point_one > 10 ) as CHECK ( 9.1f > 10 )
CHECK( data.float_nine_point_one > 9.2 ) as CHECK ( 9.1f > 9.2 )
CHECK( data.str_hello > "hello" ) as CHECK ( "hello" > "hello" )
CHECK( data.str_hello &lt; "hello" ) as CHECK ( "hello" &lt; "hello" )
CHECK( data.str_hello > "hellp" ) as CHECK ( "hello" > "hellp" )
CHECK( data.str_hello > "z" ) as CHECK ( "hello" > "z" )
CHECK( data.str_hello &lt; "hellm" ) as CHECK ( "hello" &lt; "hellm" )
CHECK( data.str_hello &lt; "a" ) as CHECK ( "hello" &lt; "a" )
CHECK( data.str_hello >= "z" ) as CHECK ( "hello" >= "z" )
CHECK( data.str_hello &lt;= "a" ) as CHECK ( "hello" &lt;= "a" )

          </Message>
          <StackTrace>
Condition.tests.cppline 152
Condition.tests.cppline 153
Condition.tests.cppline 154
Condition.tests.cppline 155
Condition.tests.cppline 156
Condition.tests.cppline 157
Condition.tests.cppline 159
Condition.tests.cppline 160
Condition.tests.cppline 162
Condition.tests.cppline 163
Condition.tests.cppline 164
Condition.tests.cppline 166
Condition.tests.cppline 167
Condition.tests.cppline 168
Condition.tests.cppline 169
Condition.tests.cppline 170
Condition.tests.cppline 171
Condition.tests.cppline 173
Condition.tests.cppline 174

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Ordering comparison checks that should succeed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Our PCG implementation provides expected results for known seeds" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Our PCG implementation provides expected results for known seeds / Default seeded" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Our PCG implementation provides expected results for known seeds / Specific seed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Output from all sections is reported" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Output from all sections is reported / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Failed: Message from section one

              </Message>
              <StackTrace>
Message.tests.cppline 70

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Output from all sections is reported / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Failed: Message from section two

              </Message>
              <StackTrace>
Message.tests.cppline 74

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Output from all sections is reported" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Overloaded comma or address-of operators are not used" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Empty test spec should have no filters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Test spec from empty string should have no filters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Test spec from just a comma should have no filters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Test spec from name should have one filter" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Test spec from quoted name should have one filter" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Test spec from name should have one filter" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Wildcard at the start" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Wildcard at the end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Wildcard at both ends" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Redundant wildcard at the start" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Redundant wildcard at the end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Redundant wildcard at both ends" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Wildcard at both ends redundant at start" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Just wildcard" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Single tag" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Single tag two matches" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Two tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Two tags spare separated" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Wildcarded name and tag" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Single tag exclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / One tag exclusion and one tag inclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / One tag exclusion and one wldcarded name inclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / One tag exclusion using exclude: and one wldcarded name inclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / name exclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / wildcarded name exclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / wildcarded name exclusion with tag inclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / wildcarded name exclusion using exclude: with tag inclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / two wildcarded names" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / empty tag" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / empty quoted name" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / quoted string followed by tag exclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Leading and trailing spaces in test spec" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Leading and trailing spaces in test name" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Shortened hide tags are split apart when parsing" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Parse test names and tags / Shortened hide tags also properly handle exclusion" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Pointers can be compared to null" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Precision of floating point stringification can be set" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Precision of floating point stringification can be set / Floats" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Precision of floating point stringification can be set / Double" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Predicate matcher can accept const char*" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / empty args don't cause a crash" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / default - no arguments" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / test lists / Specify one test case using" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / test lists / Specify one test case exclusion using exclude:" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / test lists / Specify one test case exclusion using ~" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / reporter / -r/console" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / reporter / -r/xml" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / reporter / --reporter/junit" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / reporter / Only one reporter is accepted" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / reporter / must match one of the available ones" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / debugger / -b" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / debugger / --break" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / -a aborts after first failure" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / -x 2 aborts after two failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / -x must be numeric" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / wait-for-keypress / Accepted options" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / wait-for-keypress / Accepted options" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / wait-for-keypress / Accepted options" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / wait-for-keypress / Accepted options" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / abort / wait-for-keypress / invalid options are reported" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / nothrow / -e" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / nothrow / --nothrow" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / output filename / -o filename" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / output filename / --out" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / combinations / Single character flags can be combined" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / use-colour / without option" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / use-colour / auto" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / use-colour / yes" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / use-colour / no" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / use-colour / error" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / Benchmark options / samples" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / Benchmark options / resamples" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / Benchmark options / confidence-interval" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / Benchmark options / no-analysis" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Process can be configured on command line / Benchmark options / warmup-time" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Product with differing arities - std::tuple&lt;int, double, float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Product with differing arities - std::tuple&lt;int, double>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Product with differing arities - std::tuple&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Range type with sentinel" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reconstruction should be based on stringification: #914" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( truthy(false) ) as CHECK ( Hey, its truthy! )

          </Message>
          <StackTrace>
Decomposition.tests.cppline 29

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Regex string matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), Matches("this STRING contains 'abc' as a substring") ) as CHECK_THAT ( "this string contains 'abc' as a substring" matches "this STRING contains 'abc' as a substring" case sensitively )
CHECK_THAT( testStringForMatching(), Matches("contains 'abc' as a substring") ) as CHECK_THAT ( "this string contains 'abc' as a substring" matches "contains 'abc' as a substring" case sensitively )
CHECK_THAT( testStringForMatching(), Matches("this string contains 'abc' as a") ) as CHECK_THAT ( "this string contains 'abc' as a substring" matches "this string contains 'abc' as a" case sensitively )

          </Message>
          <StackTrace>
Matchers.tests.cppline 184
Matchers.tests.cppline 185
Matchers.tests.cppline 186

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Regression test #1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / automake reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / automake reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / automake reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / compact reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / compact reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / compact reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / console reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / console reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / console reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / junit reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / junit reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / junit reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / sonarqube reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / sonarqube reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / sonarqube reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / tap reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / tap reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / tap reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / teamcity reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / teamcity reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / teamcity reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / vstest reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / vstest reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / vstest reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / xml reporter lists tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / xml reporter lists reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Reporter's write listings to provided stream / xml reporter lists tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="SUCCEED counts as a test pass" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="SUCCEED does not require an argument" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: Do that thing with the thing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: This is a really long scenario name to see how the list command deals with wrapping" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: Vector resizing affects size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: Vector resizing affects size and capacity / Given: an empty vector / When: it is made larger / Then: the size and capacity go up / And when: it is made smaller again / Then: the size goes down but the capacity stays the same" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Scenario: Vector resizing affects size and capacity / Given: an empty vector / When: we reserve more space / Then: The capacity is increased but the size remains the same" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Sends stuff to stdout and stderr" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed">
      <Output>
        <StdOut>
A string sent directly to stdout

        </StdOut>
        <StdErr>
A string sent directly to stderr
A string sent to stderr via clog

        </StdErr>
      </Output>
      <Output>
        <StdOut>
A string sent directly to stdout

        </StdOut>
        <StdErr>
A string sent directly to stderr
A string sent to stderr via clog

        </StdErr>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Some simple comparisons between doubles" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Standard output from all sections is reported" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Standard output from all sections is reported / one" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Standard output from all sections is reported / two" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
      <Output>
        <StdOut>
Message from section one
Message from section two

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StartsWith string matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK_THAT( testStringForMatching(), StartsWith("This String") ) as CHECK_THAT ( "this string contains 'abc' as a substring" starts with: "This String" )
CHECK_THAT( testStringForMatching(), StartsWith("string", Catch::CaseSensitive::No) ) as CHECK_THAT ( "this string contains 'abc' as a substring" starts with: "string" (case insensitive) )

          </Message>
          <StackTrace>
Matchers.tests.cppline 133
Matchers.tests.cppline 134

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Static arrays are convertible to string" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Static arrays are convertible to string / Single item" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Static arrays are convertible to string / Multiple" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Static arrays are convertible to string / Non-trivial inner items" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="String matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Empty string" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / From string literal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / From sub-string" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / zero-based substring" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / non-zero-based substring" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / Pointer values of full refs should match" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / Pointer values of substring refs should also match" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / Past the end substring" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / Substring off the end are trimmed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Substrings / substring start after the end is empty" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / Comparisons are deep" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / from std::string / implicitly constructed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / from std::string / explicitly constructed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / from std::string / assigned" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / to std::string / explicitly constructed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / to std::string / assigned" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / std::string += StringRef" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef / StringRef + StringRef" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef at compilation time" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef at compilation time / Simple constructors" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="StringRef at compilation time / UDL construction" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Stringifying std::chrono::duration helpers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Stringifying std::chrono::duration with weird ratios" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Stringifying std::chrono::time_point&lt;system_clock>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tabs and newlines show in output" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECK( s1 == s2 ) as CHECK ( "if ($b == 10) {
		$a	= 20;
}"
==
"if ($b == 10) {
	$a = 20;
}
" )

          </Message>
          <StackTrace>
Misc.tests.cppline 423

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tag alias can be registered against tag patterns" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tag alias can be registered against tag patterns / The same tag alias can only be registered once" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tag alias can be registered against tag patterns / Tag aliases must be of the form" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case method with test types specified inside std::tuple - MyTypes - 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case method with test types specified inside std::tuple - MyTypes - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case method with test types specified inside std::tuple - MyTypes - 2" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside std::tuple - MyTypes - 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside std::tuple - MyTypes - 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Template test case with test types specified inside std::tuple - MyTypes - 2" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - float" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - float / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - float / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - float / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - float / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - int" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - int / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - int / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - int / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - int / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::string" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::string / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::string / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::string / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::string / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::tuple&lt;intfloat> / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::tuple&lt;intfloat> / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::tuple&lt;intfloat> / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTest: vectors can be sized and resized - std::tuple&lt;intfloat> / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int float>) 6 / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int float>) 6 / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int float>) 6 / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int float>) 6 / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - float,4" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - float4 / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - float4 / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - float4 / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - float4 / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - int,5" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - int5 / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - int5 / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - int5 / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - int5 / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - std::string,15" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - std::string15 / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - std::string15 / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - std::string15 / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="TemplateTestSig: vectors can be sized and resized - std::string15 / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Test case with one argument" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Test enum bit values" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Test with special, characters &quot;in name" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="The NO_FAIL macro reports a failure but does not fail the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="The default listing implementation write to provided stream" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="The default listing implementation write to provided stream / Listing tags" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="The default listing implementation write to provided stream / Listing reporters" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="The default listing implementation write to provided stream / Listing tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="This test 'should' fail but doesn't" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Thrown string literals are translated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: For some reason someone is throwing a string literal!

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: For some reason someone is throwing a string literal!

          </Message>
          <StackTrace>
Exception.tests.cppline 157

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: For some reason someone is throwing a string literal!

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / successfully close one section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / fail one section / re-enter after failed section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / fail one section / re-enter after failed section and find next section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / successfully close one section then find another / Re-enter - skips S1 and enters S2 / Successfully close S2" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / successfully close one section then find another / Re-enter - skips S1 and enters S2 / fail S2" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Tracker / open a nested section" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Trim strings" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Unexpected exceptions can be translated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: 3.14

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: 3.14

          </Message>
          <StackTrace>
Exception.tests.cppline 153

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: 3.14

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Upcasting special member functions" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Upcasting special member functions / Move constructor" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Upcasting special member functions / move assignment" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AllMatch range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AllMatch range matcher / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AllMatch range matcher / Type requires ADL found begin and end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AllMatch range matcher / Shortcircuiting / All are read" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AllMatch range matcher / Shortcircuiting / Short-circuited" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AnyMatch range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AnyMatch range matcher / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AnyMatch range matcher / Type requires ADL found begin and end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AnyMatch range matcher / Shortcircuiting / All are read" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of AnyMatch range matcher / Shortcircuiting / Short-circuited" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of NoneMatch range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of NoneMatch range matcher / Basic usage" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of NoneMatch range matcher / Type requires ADL found begin and end" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of NoneMatch range matcher / Shortcircuiting / All are read" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of NoneMatch range matcher / Shortcircuiting / Short-circuited" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of the SizeIs range matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of the SizeIs range matcher / Some with stdlib containers" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of the SizeIs range matcher / Type requires ADL found size free function" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Usage of the SizeIs range matcher / Type has size member" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Use a custom approx" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Variadic macros" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher / Empty vector is roughly equal to an empty vector" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher / Vectors with elements / A vector is approx equal to itself" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher / Vectors with elements / Different length" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher / Vectors with elements / Same length different elements" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher -- failing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher -- failing / Empty and non empty vectors are not approx equal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( empty, Approx(t1) ) as CHECK_THAT ( {  } is approx: { 1.0, 2.0 } )

              </Message>
              <StackTrace>
Matchers.tests.cppline 610

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector Approx matcher -- failing / Just different vectors" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( v1, Approx(v2) ) as CHECK_THAT ( { 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 } )

              </Message>
              <StackTrace>
Matchers.tests.cppline 614

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers / Contains (element)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers / Contains (vector)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers / Contains (element) composed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers / Equals" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers / UnorderedEquals" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers that fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers that fail / Contains (element)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( v, VectorContains(-1) ) as CHECK_THAT ( { 1, 2, 3 } Contains: -1 )
CHECK_THAT( empty, VectorContains(1) ) as CHECK_THAT ( {  } Contains: 1 )

              </Message>
              <StackTrace>
Matchers.tests.cppline 370
Matchers.tests.cppline 371

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers that fail / Contains (vector)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( empty, Contains(v) ) as CHECK_THAT ( {  } Contains: { 1, 2, 3 } )
CHECK_THAT( v, Contains(v2) ) as CHECK_THAT ( { 1, 2, 3 } Contains: { 1, 2, 4 } )

              </Message>
              <StackTrace>
Matchers.tests.cppline 374
Matchers.tests.cppline 376

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers that fail / Equals" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( v, Equals(v2) ) as CHECK_THAT ( { 1, 2, 3 } Equals: { 1, 2 } )
CHECK_THAT( v2, Equals(v) ) as CHECK_THAT ( { 1, 2 } Equals: { 1, 2, 3 } )
CHECK_THAT( empty, Equals(v) ) as CHECK_THAT ( {  } Equals: { 1, 2, 3 } )
CHECK_THAT( v, Equals(empty) ) as CHECK_THAT ( { 1, 2, 3 } Equals: {  } )

              </Message>
              <StackTrace>
Matchers.tests.cppline 381
Matchers.tests.cppline 382
Matchers.tests.cppline 383
Matchers.tests.cppline 384

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Vector matchers that fail / UnorderedEquals" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK_THAT( v, UnorderedEquals(empty) ) as CHECK_THAT ( { 1, 2, 3 } UnorderedEquals: {  } )
CHECK_THAT( empty, UnorderedEquals(v) ) as CHECK_THAT ( {  } UnorderedEquals: { 1, 2, 3 } )
CHECK_THAT( permuted, UnorderedEquals(v) ) as CHECK_THAT ( { 1, 3 } UnorderedEquals: { 1, 2, 3 } )
CHECK_THAT( permuted, UnorderedEquals(v) ) as CHECK_THAT ( { 3, 1 } UnorderedEquals: { 1, 2, 3 } )

              </Message>
              <StackTrace>
Matchers.tests.cppline 387
Matchers.tests.cppline 388
Matchers.tests.cppline 393
Matchers.tests.cppline 396

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When checked exceptions are thrown they can be expected or unexpected" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown directly they are always failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: unexpected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: unexpected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 84

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: unexpected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown during a CHECK the test should continue" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: expected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 110

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: expected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 104

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown from functions they are always failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: expected exception

          </Message>
          <StackTrace>
Exception.tests.cppline 100

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: expected exception

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown from sections they are always failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown from sections they are always failures / section name" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
Exception: unexpected exception

              </Message>
              <StackTrace>
Exception.tests.cppline 94

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown from sections they are always failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="When unchecked exceptions are thrown, but caught, they do not affect the test" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Where the LHS is not a simple value" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="Where there is more to the expression after the RHS" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="X/level/0/a" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="X/level/0/b" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="X/level/1/a" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="X/level/1/b" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / normal string" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / empty string" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with ampersand" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with less-than" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with greater-than" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with quotes" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with control char (1)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="XmlEncode / string with control char (x7F)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="analyse no analysis" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="array&lt;int, N> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="atomic if" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="benchmark function call" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="benchmark function call / without chronometer" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="benchmark function call / with chronometer" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="boolean member" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="checkedElse" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="checkedElse, failing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECKED_ELSE( flag ) as CHECKED_ELSE ( false )
REQUIRE( testCheckedElse( false ) ) as REQUIRE ( false )

          </Message>
          <StackTrace>
Misc.tests.cppline 37
Misc.tests.cppline 182

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="checkedIf" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="checkedIf, failing" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
CHECKED_IF( flag ) as CHECKED_IF ( false )
REQUIRE( testCheckedIf( false ) ) as REQUIRE ( false )

          </Message>
          <StackTrace>
Misc.tests.cppline 31
Misc.tests.cppline 174

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / none" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / low severe" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / low mild" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / high mild" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / high severe" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="classify_outliers / mixed" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="comparisons between const int variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="comparisons between int variables" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="erfc_inv" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="estimate_clock_resolution" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="even more nested SECTION tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="even more nested SECTION tests / c / d (leaf)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="even more nested SECTION tests / c / e (leaf)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="even more nested SECTION tests / f (leaf)" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="first tag" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="has printf" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="just failure" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: Previous info should not be seen

        </StdOut>
        <ErrorInfo>
          <Message>
Failed: Previous info should not be seen

          </Message>
          <StackTrace>
Message.tests.cppline 122

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: Previous info should not be seen

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="just failure after unscoped info" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: previous unscoped info SHOULD not be seen

        </StdOut>
        <ErrorInfo>
          <Message>
Failed: previous unscoped info SHOULD not be seen

          </Message>
          <StackTrace>
Message.tests.cppline 150

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: previous unscoped info SHOULD not be seen

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="just info" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="just unscoped info" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="long long" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 0" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK( b > a ) as CHECK ( 0 > 1 )

              </Message>
              <StackTrace>
Misc.tests.cppline 144

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 1" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
CHECK( b > a ) as CHECK ( 1 > 1 )

              </Message>
              <StackTrace>
Misc.tests.cppline 144

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 2" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 4" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 5" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 6" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 7" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 8" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped SECTION tests / b is currently: 9" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="looped tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: Testing if fib[0] (1) is even
INFO: Testing if fib[1] (1) is even
INFO: Testing if fib[3] (3) is even
INFO: Testing if fib[4] (5) is even
INFO: Testing if fib[6] (13) is even
INFO: Testing if fib[7] (21) is even

        </StdOut>
        <ErrorInfo>
          <Message>
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )
CHECK( ( fib[i] % 2 ) == 0 ) as CHECK ( 1 == 0 )

          </Message>
          <StackTrace>
Misc.tests.cppline 154
Misc.tests.cppline 154
Misc.tests.cppline 154
Misc.tests.cppline 154
Misc.tests.cppline 154
Misc.tests.cppline 154

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: Testing if fib[0] (1) is even
INFO: Testing if fib[1] (1) is even
INFO: Testing if fib[3] (3) is even
INFO: Testing if fib[4] (5) is even
INFO: Testing if fib[6] (13) is even
INFO: Testing if fib[7] (21) is even

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="make_unique reimplementation" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="make_unique reimplementation / From lvalue copies" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="make_unique reimplementation / From rvalue moves" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="make_unique reimplementation / Variadic constructor" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="mean" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="measure" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="mix info, unscoped info and warning" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="more nested SECTION tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="more nested SECTION tests / doesn't equal / equal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
          <Output>
            <ErrorInfo>
              <Message>
REQUIRE( a == b ) as REQUIRE ( 1 == 2 )

              </Message>
              <StackTrace>
Misc.tests.cppline 111

              </StackTrace>
            </ErrorInfo>
          </Output>
        </UnitTestResult>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="more nested SECTION tests / doesn't equal / not equal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="more nested SECTION tests / doesn't equal / less than" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="nested SECTION tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="non streamable - with conv. op" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="non-copyable objects" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="normal_cdf" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="normal_quantile" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="not allowed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="not prints unscoped info from previous failures" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: this SHOULD be seen

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( false )
          </Message>
          <StackTrace>
Message.tests.cppline 171

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: this SHOULD be seen

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="null strings" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="null_ptr" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="parseEnums" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="parseEnums / No enums" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="parseEnums / One enum value" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="parseEnums / Multiple enum values" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="pointer to class" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="print unscoped info if passing unscoped info is printed" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="prints unscoped info on failure" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: this SHOULD be seen
INFO: this SHOULD also be seen

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( false )
          </Message>
          <StackTrace>
Message.tests.cppline 161

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: this SHOULD be seen
INFO: this SHOULD also be seen

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="prints unscoped info only for the first assertion" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: this SHOULD be seen only ONCE

        </StdOut>
        <ErrorInfo>
          <Message>
CHECK( false )
          </Message>
          <StackTrace>
Message.tests.cppline 176

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: this SHOULD be seen only ONCE

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="random SECTION tests" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="random SECTION tests / doesn't equal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="random SECTION tests / not equal" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace single char" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace two chars" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace first char" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace last char" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace all chars" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / replace no chars" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="replaceInPlace / escape '" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="resolution" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="run_for_at_least, chronometer" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="run_for_at_least, int" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="second tag" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="send a single char to INFO" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: 3

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( false )
          </Message>
          <StackTrace>
Misc.tests.cppline 196

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: 3

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="sends information to INFO" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: hi
INFO: i := 7

        </StdOut>
        <ErrorInfo>
          <Message>
REQUIRE( false )
          </Message>
          <StackTrace>
Message.tests.cppline 130

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: hi
INFO: i := 7

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="shortened hide tags are split apart" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="splitString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stacks unscoped info in loops" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: Count 1 to 3...
INFO: 1
INFO: 2
INFO: 3
INFO: Count 4 to 6...
INFO: 4
INFO: 5
INFO: 6

        </StdOut>
        <ErrorInfo>
          <Message>
CHECK( false )CHECK( false )
          </Message>
          <StackTrace>
Message.tests.cppline 188
Message.tests.cppline 194

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: Count 1 to 3...
INFO: 1
INFO: 2
INFO: 3
INFO: Count 4 to 6...
INFO: 4
INFO: 5
INFO: 6

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::map is convertible string" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::map is convertible string / empty" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::map is convertible string / single item" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::map is convertible string / several items" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::pair&lt;int,const std::string> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::pair&lt;int,std::string> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::set is convertible string" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::set is convertible string / empty" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::set is convertible string / single item" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::set is convertible string / several items" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="std::vector&lt;std::pair&lt;std::string,int> > -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="string literals of different sizes can be compared" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>
REQUIRE( std::string( "first" ) == "second" ) as REQUIRE ( "first" == "second" )

          </Message>
          <StackTrace>
Tricky.tests.cppline 83

          </StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify ranges" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( has_maker )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( has_maker_and_operator )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( has_neither )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( has_operator )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( has_template_operator )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( vectors&lt;has_maker> )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( vectors&lt;has_maker_and_operator> )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="stringify( vectors&lt;has_operator> )" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="strlen3" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="strlen3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="strlen3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="strlen3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="strlen3" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tables" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tables" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="thrown std::strings are translated" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Failed">
      <Output>
        <StdOut>
INFO: Why would you throw a std::string?

        </StdOut>
        <ErrorInfo>
          <Message>
Exception: Why would you throw a std::string?

          </Message>
          <StackTrace>
Exception.tests.cppline 161

          </StackTrace>
        </ErrorInfo>
      </Output>
      <Output>
        <StdOut>
INFO: Why would you throw a std::string?

        </StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString on const wchar_t const pointer returns the string contents" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString on const wchar_t pointer returns the string contents" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString on wchar_t const pointer returns the string contents" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString on wchar_t returns the string contents" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString(enum class w/operator&lt;&lt;)" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString(enum class)" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString(enum w/operator&lt;&lt;)" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="toString(enum)" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;float,int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;int>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;0,int,const char *>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;string,string>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="tuple&lt;tuple&lt;int>,tuple&lt;>,float>" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="uniform samples" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Default constructed unique_ptr is empty" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Take ownership of allocation / Plain reset deallocates" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Take ownership of allocation / Reset replaces ownership" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Release releases ownership" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Move constructor" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / Move assignment" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="unique_ptr reimplementation: basic functionality / free swap" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vec&lt;vec&lt;string,alloc>> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vector&lt;bool> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vector&lt;int,allocator> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vector&lt;int> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vector&lt;string> -> toString" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vectors can be sized and resized" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vectors can be sized and resized / resizing bigger changes size and capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vectors can be sized and resized / resizing smaller changes size but not capacity / We can use the 'swap trick' to reset the capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vectors can be sized and resized / reserving bigger changes capacity but not size" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="vectors can be sized and resized / reserving smaller does not change size or capacity" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="warmup" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="weighted_average_quantile" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
    <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="xmlentitycheck" computerName="localhost" testType="{GUID}" testListId="{GUID}" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed" resultType="DataDrivenTest">
      <InnerResults>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="xmlentitycheck / embedded xml: &lt;test>it should be possible to embed xml characters such as &lt; &quot; or &amp; or even whole &lt;xml>documents&lt;/xml> within an attribute&lt;/test>" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
        <UnitTestResult executionId="{GUID}" testId="{GUID}" testName="xmlentitycheck / encoded chars: these should all be encoded: &amp;&amp;&amp;&quot;&quot;&quot;&lt;&lt;&lt;&amp;&quot;&lt;&lt;&amp;&quot;" computerName="localhost" testType="{GUID}" testListId="{GUID}" parentExecutionId="{GUID}" resultType="DataDrivenDataRow" startTime="{iso8601-timestamp}" endTime="{iso8601-timestamp}" duration="{duration}" outcome="Passed"/>
      </InnerResults>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="# A test name that starts with a #" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="# A test name that starts with a #"/>
    </UnitTest>
    <UnitTest name="#1005: Comparing pointer to int and long (NULL can be either on various systems)" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Decomposition"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1005: Comparing pointer to int and long (NULL can be either on various systems)"/>
    </UnitTest>
    <UnitTest name="#1027: Bitfields can be captured" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1027: Bitfields can be captured"/>
    </UnitTest>
    <UnitTest name="#1147" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1147"/>
    </UnitTest>
    <UnitTest name="#1175 - Hidden Test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1175 - Hidden Test"/>
    </UnitTest>
    <UnitTest name="#1238" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1238"/>
    </UnitTest>
    <UnitTest name="#1245" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1245"/>
    </UnitTest>
    <UnitTest name="#1319: Sections can have description (even if it is not saved" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1319: Sections can have description (even if it is not saved"/>
    </UnitTest>
    <UnitTest name="#1403" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1403"/>
    </UnitTest>
    <UnitTest name="#1455 - INFO and WARN can start with a linebreak" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1455 - INFO and WARN can start with a linebreak"/>
    </UnitTest>
    <UnitTest name="#1514: stderr/stdout is not captured in tests aborted by an exception" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="output-capture"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1514: stderr/stdout is not captured in tests aborted by an exception"/>
    </UnitTest>
    <UnitTest name="#1548" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1548"/>
    </UnitTest>
    <UnitTest name="#1905 -- test spec parser properly clears internal state between compound tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="command-line"/>
        <TestCategoryItem TestCategory="test-spec"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1905 -- test spec parser properly clears internal state between compound tests"/>
    </UnitTest>
    <UnitTest name="#1912 -- test spec parser handles escaping" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="command-line"/>
        <TestCategoryItem TestCategory="test-spec"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1912 -- test spec parser handles escaping"/>
    </UnitTest>
    <UnitTest name="#1913 - GENERATE inside a for loop should not keep recreating the generator" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1913 - GENERATE inside a for loop should not keep recreating the generator"/>
    </UnitTest>
    <UnitTest name="#1913 - GENERATEs can share a line" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1913 - GENERATEs can share a line"/>
    </UnitTest>
    <UnitTest name="#1938 - GENERATE after a section" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1938 - GENERATE after a section"/>
    </UnitTest>
    <UnitTest name="#1938 - Section followed by flat generate" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1938 - Section followed by flat generate"/>
    </UnitTest>
    <UnitTest name="#1938 - flat generate" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1938 - flat generate"/>
    </UnitTest>
    <UnitTest name="#1938 - mixed sections and generates" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1938 - mixed sections and generates"/>
    </UnitTest>
    <UnitTest name="#1938 - nested generate" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1938 - nested generate"/>
    </UnitTest>
    <UnitTest name="#1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="compilation"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0"/>
    </UnitTest>
    <UnitTest name="#1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="compilation"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0"/>
    </UnitTest>
    <UnitTest name="#1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="compilation"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0"/>
    </UnitTest>
    <UnitTest name="#748 - captures with unexpected exceptions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!shouldfail"/>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#748 - captures with unexpected exceptions"/>
    </UnitTest>
    <UnitTest name="#809" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#809"/>
    </UnitTest>
    <UnitTest name="#833" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#833"/>
    </UnitTest>
    <UnitTest name="#835 -- errno should not be touched by Catch" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!shouldfail"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#835 -- errno should not be touched by Catch"/>
    </UnitTest>
    <UnitTest name="#872" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#872"/>
    </UnitTest>
    <UnitTest name="#961 -- Dynamically created sections should all be reported" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="#961 -- Dynamically created sections should all be reported"/>
    </UnitTest>
    <UnitTest name="'Not' checks that should fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="'Not' checks that should fail"/>
    </UnitTest>
    <UnitTest name="'Not' checks that should succeed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="'Not' checks that should succeed"/>
    </UnitTest>
    <UnitTest name="(unimplemented) static bools can be evaluated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="(unimplemented) static bools can be evaluated"/>
    </UnitTest>
    <UnitTest name="3x3x3 ints" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="3x3x3 ints"/>
    </UnitTest>
    <UnitTest name="A METHOD_AS_TEST_CASE based test run that fails" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A METHOD_AS_TEST_CASE based test run that fails"/>
    </UnitTest>
    <UnitTest name="A METHOD_AS_TEST_CASE based test run that succeeds" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A METHOD_AS_TEST_CASE based test run that succeeds"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;float,6>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;float,6>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;int,2>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;int,2>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3"/>
    </UnitTest>
    <UnitTest name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6"/>
    </UnitTest>
    <UnitTest name="A TEST_CASE_METHOD based test run that fails" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEST_CASE_METHOD based test run that fails"/>
    </UnitTest>
    <UnitTest name="A TEST_CASE_METHOD based test run that succeeds" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A TEST_CASE_METHOD based test run that succeeds"/>
    </UnitTest>
    <UnitTest name="A Template product test case - Foo&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case - Foo&lt;float>"/>
    </UnitTest>
    <UnitTest name="A Template product test case - Foo&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case - Foo&lt;int>"/>
    </UnitTest>
    <UnitTest name="A Template product test case - std::vector&lt;float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case - std::vector&lt;float>"/>
    </UnitTest>
    <UnitTest name="A Template product test case - std::vector&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case - std::vector&lt;int>"/>
    </UnitTest>
    <UnitTest name="A Template product test case with array signature - Bar&lt;float, 42>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case with array signature - Bar&lt;float, 42>"/>
    </UnitTest>
    <UnitTest name="A Template product test case with array signature - Bar&lt;int, 9>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case with array signature - Bar&lt;int, 9>"/>
    </UnitTest>
    <UnitTest name="A Template product test case with array signature - std::array&lt;float, 42>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case with array signature - std::array&lt;float, 42>"/>
    </UnitTest>
    <UnitTest name="A Template product test case with array signature - std::array&lt;int, 9>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A Template product test case with array signature - std::array&lt;int, 9>"/>
    </UnitTest>
    <UnitTest name="A comparison that uses literals instead of the normal constructor" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A comparison that uses literals instead of the normal constructor"/>
    </UnitTest>
    <UnitTest name="A couple of nested sections followed by a failure" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A couple of nested sections followed by a failure"/>
    </UnitTest>
    <UnitTest name="A failing expression with a non streamable type is still captured" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="A failing expression with a non streamable type is still captured"/>
    </UnitTest>
    <UnitTest name="Absolute margin" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Absolute margin"/>
    </UnitTest>
    <UnitTest name="An empty test with no assertions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="empty"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="An empty test with no assertions"/>
    </UnitTest>
    <UnitTest name="An expression with side-effects should only be evaluated once" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="An expression with side-effects should only be evaluated once"/>
    </UnitTest>
    <UnitTest name="An unchecked exception reports the line of the last assertion" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="An unchecked exception reports the line of the last assertion"/>
    </UnitTest>
    <UnitTest name="Anonymous test case 1" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Anonymous test case 1"/>
    </UnitTest>
    <UnitTest name="Approx setters validate their arguments" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approx setters validate their arguments"/>
    </UnitTest>
    <UnitTest name="Approx with exactly-representable margin" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approx with exactly-representable margin"/>
    </UnitTest>
    <UnitTest name="Approximate PI" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
        <TestCategoryItem TestCategory="PI"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approximate PI"/>
    </UnitTest>
    <UnitTest name="Approximate comparisons with different epsilons" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approximate comparisons with different epsilons"/>
    </UnitTest>
    <UnitTest name="Approximate comparisons with floats" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approximate comparisons with floats"/>
    </UnitTest>
    <UnitTest name="Approximate comparisons with ints" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approximate comparisons with ints"/>
    </UnitTest>
    <UnitTest name="Approximate comparisons with mixed numeric types" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Approximate comparisons with mixed numeric types"/>
    </UnitTest>
    <UnitTest name="Arbitrary predicate matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generic"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Arbitrary predicate matcher"/>
    </UnitTest>
    <UnitTest name="Assertion macros support bit operators and bool conversions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="bitops"/>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Assertion macros support bit operators and bool conversions"/>
    </UnitTest>
    <UnitTest name="Assertions then sections" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Assertions then sections"/>
    </UnitTest>
    <UnitTest name="Basic use of the Contains range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="contains"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Basic use of the Contains range matcher"/>
    </UnitTest>
    <UnitTest name="Basic use of the Empty range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="empty"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Basic use of the Empty range matcher"/>
    </UnitTest>
    <UnitTest name="CAPTURE can deal with complex expressions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="capture"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="CAPTURE can deal with complex expressions"/>
    </UnitTest>
    <UnitTest name="CAPTURE can deal with complex expressions involving commas" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="capture"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="CAPTURE can deal with complex expressions involving commas"/>
    </UnitTest>
    <UnitTest name="CAPTURE parses string and character constants" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="capture"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="CAPTURE parses string and character constants"/>
    </UnitTest>
    <UnitTest name="Capture and info messages" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Capture and info messages"/>
    </UnitTest>
    <UnitTest name="Character pretty printing" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Character pretty printing"/>
    </UnitTest>
    <UnitTest name="Clara::Arg supports single-arg parse the way Opt does" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="arg"/>
        <TestCategoryItem TestCategory="clara"/>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Clara::Arg supports single-arg parse the way Opt does"/>
    </UnitTest>
    <UnitTest name="Combining MatchAllOfGeneric does not nest" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining MatchAllOfGeneric does not nest"/>
    </UnitTest>
    <UnitTest name="Combining MatchAnyOfGeneric does not nest" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining MatchAnyOfGeneric does not nest"/>
    </UnitTest>
    <UnitTest name="Combining MatchNotOfGeneric does not nest" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining MatchNotOfGeneric does not nest"/>
    </UnitTest>
    <UnitTest name="Combining concrete matchers does not use templated matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining concrete matchers does not use templated matchers"/>
    </UnitTest>
    <UnitTest name="Combining only templated matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining only templated matchers"/>
    </UnitTest>
    <UnitTest name="Combining templated and concrete matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining templated and concrete matchers"/>
    </UnitTest>
    <UnitTest name="Combining templated matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Combining templated matchers"/>
    </UnitTest>
    <UnitTest name="Commas in various macros are allowed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Commas in various macros are allowed"/>
    </UnitTest>
    <UnitTest name="Comparing function pointers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="function pointer"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparing function pointers"/>
    </UnitTest>
    <UnitTest name="Comparison ops" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="rng"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparison ops"/>
    </UnitTest>
    <UnitTest name="Comparison with explicitly convertible types" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparison with explicitly convertible types"/>
    </UnitTest>
    <UnitTest name="Comparisons between ints where one side is computed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparisons between ints where one side is computed"/>
    </UnitTest>
    <UnitTest name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour"/>
    </UnitTest>
    <UnitTest name="Comparisons with int literals don't warn when mixing signed/ unsigned" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Comparisons with int literals don't warn when mixing signed/ unsigned"/>
    </UnitTest>
    <UnitTest name="Composed generic matchers shortcircuit" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="composed"/>
        <TestCategoryItem TestCategory="generic"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Composed generic matchers shortcircuit"/>
    </UnitTest>
    <UnitTest name="Composed matchers shortcircuit" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="composed"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Composed matchers shortcircuit"/>
    </UnitTest>
    <UnitTest name="Contains string matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Contains string matcher"/>
    </UnitTest>
    <UnitTest name="Copy and then generate a range" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Copy and then generate a range"/>
    </UnitTest>
    <UnitTest name="Custom exceptions can be translated when testing for nothrow" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Custom exceptions can be translated when testing for nothrow"/>
    </UnitTest>
    <UnitTest name="Custom exceptions can be translated when testing for throwing as something else" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Custom exceptions can be translated when testing for throwing as something else"/>
    </UnitTest>
    <UnitTest name="Custom std-exceptions can be custom translated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Custom std-exceptions can be custom translated"/>
    </UnitTest>
    <UnitTest name="Default scale is invisible to comparison" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Default scale is invisible to comparison"/>
    </UnitTest>
    <UnitTest name="Directly creating an EnumInfo" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Directly creating an EnumInfo"/>
    </UnitTest>
    <UnitTest name="EndsWith string matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="EndsWith string matcher"/>
    </UnitTest>
    <UnitTest name="Enums can quickly have stringification enabled using REGISTER_ENUM" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Enums can quickly have stringification enabled using REGISTER_ENUM"/>
    </UnitTest>
    <UnitTest name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM"/>
    </UnitTest>
    <UnitTest name="Epsilon only applies to Approx's value" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Epsilon only applies to Approx's value"/>
    </UnitTest>
    <UnitTest name="Equality checks that should fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!mayfail"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Equality checks that should fail"/>
    </UnitTest>
    <UnitTest name="Equality checks that should succeed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Equality checks that should succeed"/>
    </UnitTest>
    <UnitTest name="Equals" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Equals"/>
    </UnitTest>
    <UnitTest name="Equals string matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Equals string matcher"/>
    </UnitTest>
    <UnitTest name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="exception"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified"/>
    </UnitTest>
    <UnitTest name="Exception matchers that fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="exceptions"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Exception matchers that fail"/>
    </UnitTest>
    <UnitTest name="Exception matchers that succeed" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="exceptions"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Exception matchers that succeed"/>
    </UnitTest>
    <UnitTest name="Exception messages can be tested for" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Exception messages can be tested for"/>
    </UnitTest>
    <UnitTest name="Exceptions matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="exceptions"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Exceptions matchers"/>
    </UnitTest>
    <UnitTest name="Expected exceptions that don't throw or unexpected exceptions fail the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Expected exceptions that don't throw or unexpected exceptions fail the test"/>
    </UnitTest>
    <UnitTest name="FAIL aborts the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="FAIL aborts the test"/>
    </UnitTest>
    <UnitTest name="FAIL does not require an argument" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="FAIL does not require an argument"/>
    </UnitTest>
    <UnitTest name="FAIL_CHECK does not abort the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="FAIL_CHECK does not abort the test"/>
    </UnitTest>
    <UnitTest name="Factorials are computed" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="factorial"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Factorials are computed"/>
    </UnitTest>
    <UnitTest name="Floating point matchers: double" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="floating-point"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Floating point matchers: double"/>
    </UnitTest>
    <UnitTest name="Floating point matchers: float" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="floating-point"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Floating point matchers: float"/>
    </UnitTest>
    <UnitTest name="Generators -- adapters" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="generic"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Generators -- adapters"/>
    </UnitTest>
    <UnitTest name="Generators -- simple" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Generators -- simple"/>
    </UnitTest>
    <UnitTest name="Generators internals" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
        <TestCategoryItem TestCategory="internals"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Generators internals"/>
    </UnitTest>
    <UnitTest name="Greater-than inequalities with different epsilons" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Greater-than inequalities with different epsilons"/>
    </UnitTest>
    <UnitTest name="INFO and WARN do not abort tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="INFO and WARN do not abort tests"/>
    </UnitTest>
    <UnitTest name="INFO gets logged on failure" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="INFO gets logged on failure"/>
    </UnitTest>
    <UnitTest name="INFO gets logged on failure, even if captured before successful assertions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="INFO gets logged on failure, even if captured before successful assertions"/>
    </UnitTest>
    <UnitTest name="INFO is reset for each loop" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="INFO is reset for each loop"/>
    </UnitTest>
    <UnitTest name="Inequality checks that should fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!shouldfail"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Inequality checks that should fail"/>
    </UnitTest>
    <UnitTest name="Inequality checks that should succeed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Inequality checks that should succeed"/>
    </UnitTest>
    <UnitTest name="Lambdas in assertions" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Lambdas in assertions"/>
    </UnitTest>
    <UnitTest name="Less-than inequalities with different epsilons" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Less-than inequalities with different epsilons"/>
    </UnitTest>
    <UnitTest name="ManuallyRegistered" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="ManuallyRegistered"/>
    </UnitTest>
    <UnitTest name="Matchers can be (AllOf) composed with the &amp;&amp; operator" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="operator&amp;&amp;"/>
        <TestCategoryItem TestCategory="operators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be (AllOf) composed with the &amp;&amp; operator"/>
    </UnitTest>
    <UnitTest name="Matchers can be (AnyOf) composed with the || operator" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="operators"/>
        <TestCategoryItem TestCategory="operator||"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be (AnyOf) composed with the || operator"/>
    </UnitTest>
    <UnitTest name="Matchers can be composed with both &amp;&amp; and ||" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="operator&amp;&amp;"/>
        <TestCategoryItem TestCategory="operators"/>
        <TestCategoryItem TestCategory="operator||"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be composed with both &amp;&amp; and ||"/>
    </UnitTest>
    <UnitTest name="Matchers can be composed with both &amp;&amp; and || - failing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="operator&amp;&amp;"/>
        <TestCategoryItem TestCategory="operators"/>
        <TestCategoryItem TestCategory="operator||"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be composed with both &amp;&amp; and || - failing"/>
    </UnitTest>
    <UnitTest name="Matchers can be negated (Not) with the ! operator" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="not"/>
        <TestCategoryItem TestCategory="operators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be negated (Not) with the ! operator"/>
    </UnitTest>
    <UnitTest name="Matchers can be negated (Not) with the ! operator - failing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="not"/>
        <TestCategoryItem TestCategory="operators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Matchers can be negated (Not) with the ! operator - failing"/>
    </UnitTest>
    <UnitTest name="Mismatching exception messages failing the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Mismatching exception messages failing the test"/>
    </UnitTest>
    <UnitTest name="Nested generators and captured variables" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Nested generators and captured variables"/>
    </UnitTest>
    <UnitTest name="Nice descriptive name" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="tag1"/>
        <TestCategoryItem TestCategory="tag2"/>
        <TestCategoryItem TestCategory="tag3"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Nice descriptive name"/>
    </UnitTest>
    <UnitTest name="Non-std exceptions can be translated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Non-std exceptions can be translated"/>
    </UnitTest>
    <UnitTest name="Objects that evaluated in boolean contexts can be checked" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="SafeBool"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Objects that evaluated in boolean contexts can be checked"/>
    </UnitTest>
    <UnitTest name="Optionally static assertions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Optionally static assertions"/>
    </UnitTest>
    <UnitTest name="Ordering comparison checks that should fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Ordering comparison checks that should fail"/>
    </UnitTest>
    <UnitTest name="Ordering comparison checks that should succeed" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Ordering comparison checks that should succeed"/>
    </UnitTest>
    <UnitTest name="Our PCG implementation provides expected results for known seeds" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="rng"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Our PCG implementation provides expected results for known seeds"/>
    </UnitTest>
    <UnitTest name="Output from all sections is reported" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Output from all sections is reported"/>
    </UnitTest>
    <UnitTest name="Overloaded comma or address-of operators are not used" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Overloaded comma or address-of operators are not used"/>
    </UnitTest>
    <UnitTest name="Parse test names and tags" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="command-line"/>
        <TestCategoryItem TestCategory="test-spec"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Parse test names and tags"/>
    </UnitTest>
    <UnitTest name="Pointers can be compared to null" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Pointers can be compared to null"/>
    </UnitTest>
    <UnitTest name="Precision of floating point stringification can be set" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="floatingPoint"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Precision of floating point stringification can be set"/>
    </UnitTest>
    <UnitTest name="Predicate matcher can accept const char*" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="compilation"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Predicate matcher can accept const char*"/>
    </UnitTest>
    <UnitTest name="Process can be configured on command line" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="command-line"/>
        <TestCategoryItem TestCategory="config"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Process can be configured on command line"/>
    </UnitTest>
    <UnitTest name="Product with differing arities - std::tuple&lt;int, double, float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Product with differing arities - std::tuple&lt;int, double, float>"/>
    </UnitTest>
    <UnitTest name="Product with differing arities - std::tuple&lt;int, double>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Product with differing arities - std::tuple&lt;int, double>"/>
    </UnitTest>
    <UnitTest name="Product with differing arities - std::tuple&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="product"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Product with differing arities - std::tuple&lt;int>"/>
    </UnitTest>
    <UnitTest name="Range type with sentinel" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Range type with sentinel"/>
    </UnitTest>
    <UnitTest name="Reconstruction should be based on stringification: #914" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="Decomposition"/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Reconstruction should be based on stringification: #914"/>
    </UnitTest>
    <UnitTest name="Regex string matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Regex string matcher"/>
    </UnitTest>
    <UnitTest name="Regression test #1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Regression test #1"/>
    </UnitTest>
    <UnitTest name="Reporter's write listings to provided stream" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="reporters"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Reporter's write listings to provided stream"/>
    </UnitTest>
    <UnitTest name="SUCCEED counts as a test pass" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="SUCCEED counts as a test pass"/>
    </UnitTest>
    <UnitTest name="SUCCEED does not require an argument" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="SUCCEED does not require an argument"/>
    </UnitTest>
    <UnitTest name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="bdd"/>
        <TestCategoryItem TestCategory="fixtures"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods"/>
    </UnitTest>
    <UnitTest name="Scenario: Do that thing with the thing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tags"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Scenario: Do that thing with the thing"/>
    </UnitTest>
    <UnitTest name="Scenario: This is a really long scenario name to see how the list command deals with wrapping" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="anotherReallyLongTagNameButThisOneHasNoObviousWrapPointsSoShouldSplitWithinAWordUsingADashCharacter"/>
        <TestCategoryItem TestCategory="long"/>
        <TestCategoryItem TestCategory="lots"/>
        <TestCategoryItem TestCategory="one very long tag name that should cause line wrapping writing out using the list command"/>
        <TestCategoryItem TestCategory="tags"/>
        <TestCategoryItem TestCategory="verbose"/>
        <TestCategoryItem TestCategory="very long tags"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Scenario: This is a really long scenario name to see how the list command deals with wrapping"/>
    </UnitTest>
    <UnitTest name="Scenario: Vector resizing affects size and capacity" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="bdd"/>
        <TestCategoryItem TestCategory="capacity"/>
        <TestCategoryItem TestCategory="size"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Scenario: Vector resizing affects size and capacity"/>
    </UnitTest>
    <UnitTest name="Sends stuff to stdout and stderr" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Sends stuff to stdout and stderr"/>
    </UnitTest>
    <UnitTest name="Some simple comparisons between doubles" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Some simple comparisons between doubles"/>
    </UnitTest>
    <UnitTest name="Standard output from all sections is reported" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Standard output from all sections is reported"/>
    </UnitTest>
    <UnitTest name="StartsWith string matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="StartsWith string matcher"/>
    </UnitTest>
    <UnitTest name="Static arrays are convertible to string" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Static arrays are convertible to string"/>
    </UnitTest>
    <UnitTest name="String matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="String matchers"/>
    </UnitTest>
    <UnitTest name="StringRef" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="StringRef"/>
        <TestCategoryItem TestCategory="Strings"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="StringRef"/>
    </UnitTest>
    <UnitTest name="StringRef at compilation time" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="constexpr"/>
        <TestCategoryItem TestCategory="StringRef"/>
        <TestCategoryItem TestCategory="Strings"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="StringRef at compilation time"/>
    </UnitTest>
    <UnitTest name="Stringifying std::chrono::duration helpers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="chrono"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Stringifying std::chrono::duration helpers"/>
    </UnitTest>
    <UnitTest name="Stringifying std::chrono::duration with weird ratios" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="chrono"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Stringifying std::chrono::duration with weird ratios"/>
    </UnitTest>
    <UnitTest name="Stringifying std::chrono::time_point&lt;system_clock>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="chrono"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Stringifying std::chrono::time_point&lt;system_clock>"/>
    </UnitTest>
    <UnitTest name="Tabs and newlines show in output" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="whitespace"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Tabs and newlines show in output"/>
    </UnitTest>
    <UnitTest name="Tag alias can be registered against tag patterns" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Tag alias can be registered against tag patterns"/>
    </UnitTest>
    <UnitTest name="Template test case method with test types specified inside std::tuple - MyTypes - 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case method with test types specified inside std::tuple - MyTypes - 0"/>
    </UnitTest>
    <UnitTest name="Template test case method with test types specified inside std::tuple - MyTypes - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case method with test types specified inside std::tuple - MyTypes - 1"/>
    </UnitTest>
    <UnitTest name="Template test case method with test types specified inside std::tuple - MyTypes - 2" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="class"/>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case method with test types specified inside std::tuple - MyTypes - 2"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside std::tuple - MyTypes - 0" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside std::tuple - MyTypes - 0"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside std::tuple - MyTypes - 1" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside std::tuple - MyTypes - 1"/>
    </UnitTest>
    <UnitTest name="Template test case with test types specified inside std::tuple - MyTypes - 2" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="list"/>
        <TestCategoryItem TestCategory="template"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Template test case with test types specified inside std::tuple - MyTypes - 2"/>
    </UnitTest>
    <UnitTest name="TemplateTest: vectors can be sized and resized - float" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTest: vectors can be sized and resized - float"/>
    </UnitTest>
    <UnitTest name="TemplateTest: vectors can be sized and resized - int" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTest: vectors can be sized and resized - int"/>
    </UnitTest>
    <UnitTest name="TemplateTest: vectors can be sized and resized - std::string" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTest: vectors can be sized and resized - std::string"/>
    </UnitTest>
    <UnitTest name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>"/>
    </UnitTest>
    <UnitTest name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6"/>
    </UnitTest>
    <UnitTest name="TemplateTestSig: vectors can be sized and resized - float,4" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTestSig: vectors can be sized and resized - float,4"/>
    </UnitTest>
    <UnitTest name="TemplateTestSig: vectors can be sized and resized - int,5" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTestSig: vectors can be sized and resized - int,5"/>
    </UnitTest>
    <UnitTest name="TemplateTestSig: vectors can be sized and resized - std::string,15" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="nttp"/>
        <TestCategoryItem TestCategory="template"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="TemplateTestSig: vectors can be sized and resized - std::string,15"/>
    </UnitTest>
    <UnitTest name="Test case with one argument" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Test case with one argument"/>
    </UnitTest>
    <UnitTest name="Test enum bit values" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Test enum bit values"/>
    </UnitTest>
    <UnitTest name="Test with special, characters &quot;in name" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="cli"/>
        <TestCategoryItem TestCategory="regression"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Test with special, characters &quot;in name"/>
    </UnitTest>
    <UnitTest name="The NO_FAIL macro reports a failure but does not fail the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="The NO_FAIL macro reports a failure but does not fail the test"/>
    </UnitTest>
    <UnitTest name="The default listing implementation write to provided stream" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="reporter-helpers"/>
        <TestCategoryItem TestCategory="reporters"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="The default listing implementation write to provided stream"/>
    </UnitTest>
    <UnitTest name="This test 'should' fail but doesn't" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!shouldfail"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="This test 'should' fail but doesn't"/>
    </UnitTest>
    <UnitTest name="Thrown string literals are translated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Thrown string literals are translated"/>
    </UnitTest>
    <UnitTest name="Tracker" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Tracker"/>
    </UnitTest>
    <UnitTest name="Trim strings" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="string-manip"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Trim strings"/>
    </UnitTest>
    <UnitTest name="Unexpected exceptions can be translated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Unexpected exceptions can be translated"/>
    </UnitTest>
    <UnitTest name="Upcasting special member functions" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="internals"/>
        <TestCategoryItem TestCategory="unique-ptr"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Upcasting special member functions"/>
    </UnitTest>
    <UnitTest name="Usage of AllMatch range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="quantifiers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Usage of AllMatch range matcher"/>
    </UnitTest>
    <UnitTest name="Usage of AnyMatch range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="quantifiers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Usage of AnyMatch range matcher"/>
    </UnitTest>
    <UnitTest name="Usage of NoneMatch range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="quantifiers"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Usage of NoneMatch range matcher"/>
    </UnitTest>
    <UnitTest name="Usage of the SizeIs range matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="size"/>
        <TestCategoryItem TestCategory="templated"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Usage of the SizeIs range matcher"/>
    </UnitTest>
    <UnitTest name="Use a custom approx" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Approx"/>
        <TestCategoryItem TestCategory="custom"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Use a custom approx"/>
    </UnitTest>
    <UnitTest name="Variadic macros" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="sections"/>
        <TestCategoryItem TestCategory="variadic"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Variadic macros"/>
    </UnitTest>
    <UnitTest name="Vector Approx matcher" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="approx"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Vector Approx matcher"/>
    </UnitTest>
    <UnitTest name="Vector Approx matcher -- failing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="approx"/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Vector Approx matcher -- failing"/>
    </UnitTest>
    <UnitTest name="Vector matchers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Vector matchers"/>
    </UnitTest>
    <UnitTest name="Vector matchers that fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="matchers"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Vector matchers that fail"/>
    </UnitTest>
    <UnitTest name="When checked exceptions are thrown they can be expected or unexpected" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When checked exceptions are thrown they can be expected or unexpected"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown directly they are always failures" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown directly they are always failures"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown during a CHECK the test should continue" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown during a CHECK the test should continue"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown from functions they are always failures" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown from functions they are always failures"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown from sections they are always failures" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown from sections they are always failures"/>
    </UnitTest>
    <UnitTest name="When unchecked exceptions are thrown, but caught, they do not affect the test" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="When unchecked exceptions are thrown, but caught, they do not affect the test"/>
    </UnitTest>
    <UnitTest name="Where the LHS is not a simple value" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Where the LHS is not a simple value"/>
    </UnitTest>
    <UnitTest name="Where there is more to the expression after the RHS" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="Where there is more to the expression after the RHS"/>
    </UnitTest>
    <UnitTest name="X/level/0/a" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="X/level/0/a"/>
    </UnitTest>
    <UnitTest name="X/level/0/b" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="fizz"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="X/level/0/b"/>
    </UnitTest>
    <UnitTest name="X/level/1/a" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="X/level/1/a"/>
    </UnitTest>
    <UnitTest name="X/level/1/b" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="X/level/1/b"/>
    </UnitTest>
    <UnitTest name="XmlEncode" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="XML"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="XmlEncode"/>
    </UnitTest>
    <UnitTest name="analyse no analysis" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="analyse no analysis"/>
    </UnitTest>
    <UnitTest name="array&lt;int, N> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="array"/>
        <TestCategoryItem TestCategory="containers"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="array&lt;int, N> -> toString"/>
    </UnitTest>
    <UnitTest name="atomic if" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="0"/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="atomic if"/>
    </UnitTest>
    <UnitTest name="benchmark function call" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="benchmark function call"/>
    </UnitTest>
    <UnitTest name="boolean member" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="boolean member"/>
    </UnitTest>
    <UnitTest name="checkedElse" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="checkedElse"/>
    </UnitTest>
    <UnitTest name="checkedElse, failing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="checkedElse, failing"/>
    </UnitTest>
    <UnitTest name="checkedIf" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="checkedIf"/>
    </UnitTest>
    <UnitTest name="checkedIf, failing" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="checkedIf, failing"/>
    </UnitTest>
    <UnitTest name="classify_outliers" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="classify_outliers"/>
    </UnitTest>
    <UnitTest name="comparisons between const int variables" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="comparisons between const int variables"/>
    </UnitTest>
    <UnitTest name="comparisons between int variables" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="comparisons between int variables"/>
    </UnitTest>
    <UnitTest name="erfc_inv" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="erfc_inv"/>
    </UnitTest>
    <UnitTest name="estimate_clock_resolution" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="estimate_clock_resolution"/>
    </UnitTest>
    <UnitTest name="even more nested SECTION tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="sections"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="even more nested SECTION tests"/>
    </UnitTest>
    <UnitTest name="first tag" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="tag1"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="first tag"/>
    </UnitTest>
    <UnitTest name="has printf" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="has printf"/>
    </UnitTest>
    <UnitTest name="just failure" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="fail"/>
        <TestCategoryItem TestCategory="isolated info"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="just failure"/>
    </UnitTest>
    <UnitTest name="just failure after unscoped info" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="just failure after unscoped info"/>
    </UnitTest>
    <UnitTest name="just info" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="isolated info"/>
        <TestCategoryItem TestCategory="messages"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="just info"/>
    </UnitTest>
    <UnitTest name="just unscoped info" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="just unscoped info"/>
    </UnitTest>
    <UnitTest name="long long" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="long long"/>
    </UnitTest>
    <UnitTest name="looped SECTION tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="sections"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="looped SECTION tests"/>
    </UnitTest>
    <UnitTest name="looped tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="looped tests"/>
    </UnitTest>
    <UnitTest name="make_unique reimplementation" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="internals"/>
        <TestCategoryItem TestCategory="unique-ptr"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="make_unique reimplementation"/>
    </UnitTest>
    <UnitTest name="mean" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="mean"/>
    </UnitTest>
    <UnitTest name="measure" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="measure"/>
    </UnitTest>
    <UnitTest name="mix info, unscoped info and warning" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="mix info, unscoped info and warning"/>
    </UnitTest>
    <UnitTest name="more nested SECTION tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="sections"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="more nested SECTION tests"/>
    </UnitTest>
    <UnitTest name="nested SECTION tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="sections"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="nested SECTION tests"/>
    </UnitTest>
    <UnitTest name="non streamable - with conv. op" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="non streamable - with conv. op"/>
    </UnitTest>
    <UnitTest name="non-copyable objects" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="non-copyable objects"/>
    </UnitTest>
    <UnitTest name="normal_cdf" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="normal_cdf"/>
    </UnitTest>
    <UnitTest name="normal_quantile" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="normal_quantile"/>
    </UnitTest>
    <UnitTest name="not allowed" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="not allowed"/>
    </UnitTest>
    <UnitTest name="not prints unscoped info from previous failures" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="not prints unscoped info from previous failures"/>
    </UnitTest>
    <UnitTest name="null strings" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="null strings"/>
    </UnitTest>
    <UnitTest name="null_ptr" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="null_ptr"/>
    </UnitTest>
    <UnitTest name="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="pair"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString"/>
    </UnitTest>
    <UnitTest name="parseEnums" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="enums"/>
        <TestCategoryItem TestCategory="Strings"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="parseEnums"/>
    </UnitTest>
    <UnitTest name="pointer to class" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="pointer to class"/>
    </UnitTest>
    <UnitTest name="print unscoped info if passing unscoped info is printed" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="print unscoped info if passing unscoped info is printed"/>
    </UnitTest>
    <UnitTest name="prints unscoped info on failure" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="prints unscoped info on failure"/>
    </UnitTest>
    <UnitTest name="prints unscoped info only for the first assertion" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="prints unscoped info only for the first assertion"/>
    </UnitTest>
    <UnitTest name="random SECTION tests" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="sections"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="random SECTION tests"/>
    </UnitTest>
    <UnitTest name="replaceInPlace" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="string-manip"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="replaceInPlace"/>
    </UnitTest>
    <UnitTest name="resolution" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="resolution"/>
    </UnitTest>
    <UnitTest name="run_for_at_least, chronometer" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="run_for_at_least, chronometer"/>
    </UnitTest>
    <UnitTest name="run_for_at_least, int" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="run_for_at_least, int"/>
    </UnitTest>
    <UnitTest name="second tag" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="tag2"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="second tag"/>
    </UnitTest>
    <UnitTest name="send a single char to INFO" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="send a single char to INFO"/>
    </UnitTest>
    <UnitTest name="sends information to INFO" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="sends information to INFO"/>
    </UnitTest>
    <UnitTest name="shortened hide tags are split apart" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="shortened hide tags are split apart"/>
    </UnitTest>
    <UnitTest name="splitString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="string-manip"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="splitString"/>
    </UnitTest>
    <UnitTest name="stacks unscoped info in loops" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="info"/>
        <TestCategoryItem TestCategory="unscoped"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stacks unscoped info in loops"/>
    </UnitTest>
    <UnitTest name="std::map is convertible string" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="std::map is convertible string"/>
    </UnitTest>
    <UnitTest name="std::pair&lt;int,const std::string> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="pair"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="std::pair&lt;int,const std::string> -> toString"/>
    </UnitTest>
    <UnitTest name="std::pair&lt;int,std::string> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="pair"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="std::pair&lt;int,std::string> -> toString"/>
    </UnitTest>
    <UnitTest name="std::set is convertible string" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="std::set is convertible string"/>
    </UnitTest>
    <UnitTest name="std::vector&lt;std::pair&lt;std::string,int> > -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="pair"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="std::vector&lt;std::pair&lt;std::string,int> > -> toString"/>
    </UnitTest>
    <UnitTest name="string literals of different sizes can be compared" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
        <TestCategoryItem TestCategory="Tricky"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="string literals of different sizes can be compared"/>
    </UnitTest>
    <UnitTest name="stringify ranges" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify ranges"/>
    </UnitTest>
    <UnitTest name="stringify( has_maker )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( has_maker )"/>
    </UnitTest>
    <UnitTest name="stringify( has_maker_and_operator )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( has_maker_and_operator )"/>
    </UnitTest>
    <UnitTest name="stringify( has_neither )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( has_neither )"/>
    </UnitTest>
    <UnitTest name="stringify( has_operator )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( has_operator )"/>
    </UnitTest>
    <UnitTest name="stringify( has_template_operator )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( has_template_operator )"/>
    </UnitTest>
    <UnitTest name="stringify( vectors&lt;has_maker> )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( vectors&lt;has_maker> )"/>
    </UnitTest>
    <UnitTest name="stringify( vectors&lt;has_maker_and_operator> )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( vectors&lt;has_maker_and_operator> )"/>
    </UnitTest>
    <UnitTest name="stringify( vectors&lt;has_operator> )" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="stringify( vectors&lt;has_operator> )"/>
    </UnitTest>
    <UnitTest name="strlen3" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="strlen3"/>
    </UnitTest>
    <UnitTest name="tables" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="generators"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tables"/>
    </UnitTest>
    <UnitTest name="thrown std::strings are translated" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="!throws"/>
        <TestCategoryItem TestCategory="."/>
        <TestCategoryItem TestCategory="failing"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="thrown std::strings are translated"/>
    </UnitTest>
    <UnitTest name="toString on const wchar_t const pointer returns the string contents" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString on const wchar_t const pointer returns the string contents"/>
    </UnitTest>
    <UnitTest name="toString on const wchar_t pointer returns the string contents" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString on const wchar_t pointer returns the string contents"/>
    </UnitTest>
    <UnitTest name="toString on wchar_t const pointer returns the string contents" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString on wchar_t const pointer returns the string contents"/>
    </UnitTest>
    <UnitTest name="toString on wchar_t returns the string contents" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString on wchar_t returns the string contents"/>
    </UnitTest>
    <UnitTest name="toString(enum class w/operator&lt;&lt;)" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="enum"/>
        <TestCategoryItem TestCategory="enumClass"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString(enum class w/operator&lt;&lt;)"/>
    </UnitTest>
    <UnitTest name="toString(enum class)" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="enum"/>
        <TestCategoryItem TestCategory="enumClass"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString(enum class)"/>
    </UnitTest>
    <UnitTest name="toString(enum w/operator&lt;&lt;)" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="enum"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString(enum w/operator&lt;&lt;)"/>
    </UnitTest>
    <UnitTest name="toString(enum)" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="enum"/>
        <TestCategoryItem TestCategory="toString"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="toString(enum)"/>
    </UnitTest>
    <UnitTest name="tuple&lt;>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;>"/>
    </UnitTest>
    <UnitTest name="tuple&lt;float,int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;float,int>"/>
    </UnitTest>
    <UnitTest name="tuple&lt;int>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;int>"/>
    </UnitTest>
    <UnitTest name="tuple&lt;0,int,const char *>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;0,int,const char *>"/>
    </UnitTest>
    <UnitTest name="tuple&lt;string,string>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;string,string>"/>
    </UnitTest>
    <UnitTest name="tuple&lt;tuple&lt;int>,tuple&lt;>,float>" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="tuple"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="tuple&lt;tuple&lt;int>,tuple&lt;>,float>"/>
    </UnitTest>
    <UnitTest name="uniform samples" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="uniform samples"/>
    </UnitTest>
    <UnitTest name="unique_ptr reimplementation: basic functionality" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="internals"/>
        <TestCategoryItem TestCategory="unique-ptr"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="unique_ptr reimplementation: basic functionality"/>
    </UnitTest>
    <UnitTest name="vec&lt;vec&lt;string,alloc>> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="vector,allocator"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vec&lt;vec&lt;string,alloc>> -> toString"/>
    </UnitTest>
    <UnitTest name="vector&lt;bool> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="containers"/>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vector&lt;bool> -> toString"/>
    </UnitTest>
    <UnitTest name="vector&lt;int,allocator> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="vector,allocator"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vector&lt;int,allocator> -> toString"/>
    </UnitTest>
    <UnitTest name="vector&lt;int> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vector&lt;int> -> toString"/>
    </UnitTest>
    <UnitTest name="vector&lt;string> -> toString" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="toString"/>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vector&lt;string> -> toString"/>
    </UnitTest>
    <UnitTest name="vectors can be sized and resized" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="vector"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="vectors can be sized and resized"/>
    </UnitTest>
    <UnitTest name="warmup" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="warmup"/>
    </UnitTest>
    <UnitTest name="weighted_average_quantile" storage="<exe-name>" id="{GUID}">
      <TestCategory>
        <TestCategoryItem TestCategory="benchmark"/>
      </TestCategory>
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="weighted_average_quantile"/>
    </UnitTest>
    <UnitTest name="xmlentitycheck" storage="<exe-name>" id="{GUID}">
      <Execution id="{GUID}"/>
      <TestMethod codeBase="<exe-name>" adapterTypeName="executor://mstestadapter/v2" className="Catch2.Test" name="xmlentitycheck"/>
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Default test list for Catch2" id="{GUID}"/>
  </TestLists>
  <TestEntries>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
    <TestEntry testId="{GUID}" executionId="{GUID}" testListId="{GUID}"/>
  </TestEntries>
  <ResultSummary outcome="Failed"/>
</TestRun>
